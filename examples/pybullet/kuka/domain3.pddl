(define (domain sorbet-station)
  (:requirements :strips :equality)
  (:predicates
    (Stackable ?o ?r)
    (Bowl1 ?r)
    (Bowl2 ?r)

    (Grasp ?o ?g)
    (Kin ?o ?p ?g ?q ?t)
    (FreeMotion ?q1 ?t ?q2)
    (HoldingMotion ?q1 ?t ?q2 ?o ?g)
    (Supported ?o ?p ?r)
    ; (TrajCollision ?t ?o2 ?p2)

    (AtPose ?o ?p)
    (AtGrasp ?o ?g)
    (HandEmpty)
    (AtConf ?q)
    (CanMove)
    (Wash ?o)
    (VanillaDirty)
    (StrawDirty)

    (isFinish)
    (First1 ?o ?r)
    (Second1 ?o ?r)
    (First2 ?o ?r)
    (Second2 ?o ?r)

    (isEmpty1)
    (isEmpty2)
    (isOne1)
    (isOne2)

    (One1 ?o)
    (One2 ?o)
    (Two1 ?o)
    (Two2 ?o)

    (UnsafeTraj ?t)

    (StrawScoop ?o)
    (VanillaScoop ?o)
  )

  (:action move_free
    :parameters (?q1 ?q2 ?t)
    :precondition (and (FreeMotion ?q1 ?t ?q2)
                       (AtConf ?q1) (HandEmpty) (CanMove) (not (UnsafeTraj ?t)))
    :effect (and (AtConf ?q2)
                 (not (AtConf ?q1)) (not (CanMove)))
  )
  (:action move_holding
    :parameters (?q1 ?q2 ?o ?g ?t)
    :precondition (and (HoldingMotion ?q1 ?t ?q2 ?o ?g)
                       (AtConf ?q1) (AtGrasp ?o ?g) (CanMove) (not (UnsafeTraj ?t)))
    :effect (and (AtConf ?q2)
                 (not (AtConf ?q1)) (not (CanMove)))
  )
  (:action scoop_vanilla
    :parameters (?o ?p ?g ?q ?t)
    :precondition (and (Kin ?o ?p ?g ?q ?t)
                       (AtPose ?o ?p) (HandEmpty) (AtConf ?q)  (VanillaScoop ?o) (not (StrawDirty)) (not (UnsafeTraj ?t)) )
    :effect (and (AtGrasp ?o ?g) (CanMove)
                 (not (AtPose ?o ?p)) (not (HandEmpty)) (VanillaDirty))
  )
  (:action scoop_straw
    :parameters (?o ?p ?g ?q ?t)
    :precondition (and (Kin ?o ?p ?g ?q ?t)
                       (AtPose ?o ?p) (HandEmpty) (AtConf ?q) (StrawScoop ?o) (not (VanillaDirty))  (not (UnsafeTraj ?t)) )
    :effect (and (AtGrasp ?o ?g) (CanMove)
                 (not (AtPose ?o ?p)) (not (HandEmpty)) (StrawDirty))
  )

  (:action dump_first1
    :parameters (?o ?p ?g ?q ?t)
    :precondition (and (Kin ?o ?p ?g ?q ?t)
                       (AtGrasp ?o ?g) (AtConf ?q) (isEmpty1)  (not (UnsafeTraj ?t)))
    :effect (and (AtPose ?o ?p) (HandEmpty) (CanMove)
                 (not (AtGrasp ?o ?g))
                   (One1 ?o) (not (isEmpty1)) (isOne1) )
  )
  (:action dump_second1
    :parameters (?o ?p ?g ?q ?t)
    :precondition (and (Kin ?o ?p ?g ?q ?t)
                       (AtGrasp ?o ?g) (AtConf ?q) (isOne1)  (not (isFinish)) (not (UnsafeTraj ?t)))
    :effect (and (AtPose ?o ?p) (HandEmpty) (CanMove)
                 (not (AtGrasp ?o ?g))
                  (Two1 ?o) (not (isOne1)) (isFinish))
  )

  (:action dump_first2
    :parameters (?o ?p ?g ?q ?t)
    :precondition (and (Kin ?o ?p ?g ?q ?t)
                       (AtGrasp ?o ?g) (AtConf ?q) (isFinish) (not (UnsafeTraj ?t)))
    :effect (and (AtPose ?o ?p) (HandEmpty) (CanMove)
                 (not (AtGrasp ?o ?g))
                   (One2 ?o) (not (isEmpty2)) (isOne2))
  )
  (:action dump_second2
    :parameters (?o ?p ?g ?q ?t)
    :precondition (and (Kin ?o ?p ?g ?q ?t)
                       (AtGrasp ?o ?g) (AtConf ?q)  (isOne2)  (not (UnsafeTraj ?t)))
    :effect (and (AtPose ?o ?p) (HandEmpty) (CanMove)
                 (not (AtGrasp ?o ?g))
                  (Two2 ?o) (not(isOne2)))
  )

  (:action wash
    :parameters (?o ?p ?g ?q ?t)
    :precondition (and (Kin ?o ?p ?g ?q ?t)
                       (AtPose ?o ?p) (HandEmpty) (Wash ?o) (AtConf ?q) (not (UnsafeTraj ?t)) (or (VanillaDirty) (StrawDirty)))
    :effect (and (CanMove)
                 (not (AtPose ?o ?p)) (not (VanillaDirty)) (not (StrawDirty)) )
  )
 
  (:derived (First1 ?o ?r)
    (exists (?p) (and (One1 ?o) (Supported ?o ?p ?r)
                      (AtPose ?o ?p) (Bowl1 ?r) (or (VanillaScoop ?o) (StrawScoop ?o)) ))
  )
  (:derived (Second1 ?o ?r)
    (exists (?p) (and (Two1 ?o) (Supported ?o ?p ?r)
                      (AtPose ?o ?p) (or (VanillaScoop ?r) (StrawScoop ?r)) (or (VanillaScoop ?o) (StrawScoop ?o))  ))
  )

  (:derived (First2 ?o ?r)
    (exists (?p) (and (One2 ?o) (Supported ?o ?p ?r)
                      (AtPose ?o ?p) (Bowl2 ?r) (or (VanillaScoop ?o) (StrawScoop ?o)) ))
  )
  (:derived (Second2 ?o ?r)
    (exists (?p) (and (Two2 ?o) (Supported ?o ?p ?r)
                      (AtPose ?o ?p) (or (VanillaScoop ?r) (StrawScoop ?r)) (or (VanillaScoop ?o) (StrawScoop ?o))  ))
  )
    
  ; (:derived (UnsafeTraj ?t)
  ;  (exists (?o2 ?p2) (and (TrajCollision ?t ?o2 ?p2)
  ;                         (AtPose ?o2 ?p2)))
  ; )
)